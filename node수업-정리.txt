1. package
    - 완전한 Application을(개발툴) npm으로 깔수 있음 ex) nodedaeom, babel, webpack
    - 코드 샘플, 프로젝트에서 사용하는 모듈(library)
2. 의존성(dependency)
   
    - 개발 하고 있는 프로젝트(어플리케이션, 패키지)에서 설치하고 사용하는 다른 페키지
   
    - 일반 의존성
        - 개발 하고 있는 프로젝트에서 사용하는 패키지로 배포에 꼭 포함
        설치방법 : $ npm i (설치할 패키지)
   
    - 개발 의존성
        - 개발에 필요하거나 도움이 되는 패키지(dev tools)는 배포에 포합되지 않는다
        설치방법 : $ npm i -D nodedaeom

- 이렇게 둘을 나누는 이유는 내가 개발할때 사용했던 모듈들과 배포할때의 모듈을 구분해주어야 한다.
- 배포할때는 모듈은 빼고 소스만 올리고 그 소스를 관리하는 놈들만 올려야 한다.
3. package 설치 방식
    1) 전역설치(global) : 여러 프로젝트에서 공통으로 사용하는 tools들 설치할때
        설치방법 : $ npm -i g
    2) 지역설치(project local) : 특정 프로젝트에만 종속적인 도구나 library
        설치방법 : $ npm -i -D --> 개발 의존성 패키지 설치
                   $ npm -i    -- > 일반 의존성 패키지 설치
    3) 패키지 설치 순서
        [project-ex01] $ npm i ejs          (local install, general dependency)
        [project-ex01] $ npm i -D nodaemon  (local install, development dependency)
        [project-ex01] $ npm i -g gulp      (global install)
    4) 패키지 삭제
        [project-ex01] $ npm un install     (local install 삭제)
        [project-ex01] $ npm un -D nodaemon (local install 삭제)
        [project-ex01] $ npm un -g gulp

4. Node(JavaScript) project(C/S Application, package) 생성
    생성 순서
    1) project 디렉토리 생성 (mkdir)
    2) 프로젝트 이동         (cd)
    3) [project-ex01] $ npm init -y (프로젝트 매니페스트 파일(package.json) 생성, 프로젝트 초기화)

5. Module
    1) 코어 모듈(fs=파일 시스템, os,.... node 에서 제공해주는 모듈) -> 페키지는 아니다
    2) 파일 모듈: 파일 경로로 불러와서 모듈안의 객체, 함수, 클래스를 사용한다
    3) npm 모듈: npm을 통해서 node_module에서 설치해서 사용하는 모듈
        - 로컬 배포
        - 원격 배포

6. 원격 배포하기(npmjs.com npm registry에 패키지 배포하기)
    1) 사용자 등록(회원가입)
    2) 배포
        -$ npm adduser 
        Username: ...(내 npm아이디)
        Password: ...(비밀번호)
        // 배포하기
        [dozone-ghksxk1002-math] $ npm publish

7. Helloweb-ex01 : 맨바닥에서 web application 만들어 보기
    1. app01: based on http : core module
    2. app02: based on http, fs: core module
    3. app03: based on connect, serve-static: npm package
    4. app04: based on connect, serve-static, connect-route: npm package

8. Helloweb-ex02 : express 프레임워크 기반의 web application 만들기
1)
[helloweb-ex02] $npm init -y
// 설치할 패키지
[helloweb-ex02] $npm i express
[helloweb-ex02] $npm i ejs
[helloweb-ex02] $npm i -D nodaemon
2)
package.json 스크립트
 "scripts":{
     "start" : "node index.js",
     "debug" : "nodaemon index.js"
 }
3)
 1. 실제 서비스 운용시에는 
[helloweb-ex02] $npm start      (서비스 실제 운용시)
[helloweb-ex02] $npm run debug  (개발시)
4) 디렉토리 구조
[helloweb-ex02] $ mkdir public
[helloweb-ex02] $ mkdir routes // url 과 컨트롤러를 멥핑하고 있는것
[helloweb-ex02] $ mkdir controllers
[helloweb-ex02] $ mkdir models
[helloweb-ex02] $ mkdir views


---
9. emaillist(models based on mysql)

1)
[emaillist] $npm init -y
// 설치할 패키지
[emaillist] $npm i express
[emaillist] $npm i ejs
[emaillist] $npm i mysql2
[emaillist] $npm i -D nodaemon
2)
package.json 스크립트
 "scripts":{
     "start" : "node index.js",
     "debug" : "nodaemon index.js"
 }
3)
 1. 실제 서비스 운용시에는 
[emaillist] $npm start      (서비스 실제 운용시)
[emaillist] $npm run debug  (개발시)
4) 디렉토리 구조
[emaillist] $ mkdir public
[emaillist] $ mkdir routes // url 과 컨트롤러를 멥핑하고 있는것
[emaillist] $ mkdir controllers
[emaillist] $ mkdir models
[emaillist] $ mkdir views

----------

10. guestbook(models based on mysql)

1)
[guestbook] $npm init -y
// 설치할 패키지
[guestbook] $npm i express
[guestbook] $npm i ejs
[guestbook] $npm i mysql2
[guestbook] $npm i -D nodaemon
2)
package.json 스크립트
 "scripts":{
     "start" : "node index.js",
     "debug" : "nodaemon index.js"
 }
3)
 1. 실제 서비스 운용시에는 
[guestbook] $npm start      (서비스 실제 운용시)
[guestbook] $npm run debug  (개발시)
4) 디렉토리 구조
[guestbook] $ mkdir public
[guestbook] $ mkdir routes // url 과 컨트롤러를 멥핑하고 있는것
[guestbook] $ mkdir controllers
[guestbook] $ mkdir models
[guestbook] $ mkdir views

---

11. mysite(models based on Sequelize) - ORM 기반의

1. orm(Sequelize) -> js test
2. user(session, 인증, 접근제어), jQurey(ajax) + API
3. views -> include(ejs)
4. dotenv(configuration: DB connection, port, static directory)
5. log(winston)
6. fileupload(multer )
7. error 처리 한곳이로 모으기